{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","oceancatslogo.png","connectpageart.png","OtterHome.png","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","twitter","url","bgColor","fgColor","telegram","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","href","src","oceancatslogo","Container","marginTop","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","OtterHome","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","connectpageart","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","e","getCandyMachineId","clusterApiUrl","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","slot","confirmations","subId","Promise","resolve","reject","getSignatureStatuses","signatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","all","currentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.64660bf4.chunk.js","sourcesContent":["import { Paper } from \"@material-ui/core\";\nimport Countdown from \"react-countdown\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      padding: theme.spacing(0),\n      \"& > *\": {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"#384457\",\n        color: \"white\",\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: \"flex\",\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      background: \"#384457\",\n      color: \"white\",\n      borderRadius: 5,\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n  })\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: orange;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n  border-radius: 40px;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"WHITELIST MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\n\n  useEffect(() => {\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\n      console.log(\"Minting after token active\");\n      setWaitForActiveToken(false);\n      onMint();\n    }\n  }, [waitForActiveToken, gatewayStatus, onMint]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              setWaitForActiveToken(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","export default __webpack_public_path__ + \"static/media/oceancatslogo.ce490f58.png\";","export default __webpack_public_path__ + \"static/media/connectpageart.410b6018.png\";","export default __webpack_public_path__ + \"static/media/OtterHome.fea042ea.png\";","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n\nimport oceancatslogo from \"./oceancatslogo.png\";\nimport connectpageart from \"./connectpageart.png\";\nimport OtterHome from \"./OtterHome.png\";\n\nimport { SocialIcon } from \"react-social-icons\";\nconst twitter = (\n  <SocialIcon\n    url=\"https://twitter.com/medusa_protocol\"\n    bgColor=\"#000000\"\n    fgColor=\"#FFA500\"\n    style={{ height: 45, width: 45 }}\n  />\n);\nconst telegram = (\n  <SocialIcon\n    url=\"https://t.me/medusaprotocol\"\n    network=\"telegram\"\n    bgColor=\"#000000\"\n    fgColor=\"#FFA500\"\n    style={{ height: 45, width: 45 }}\n  />\n);\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: orange;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n  border-radius: 40px;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!anchorWallet) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection\n          );\n          console.log(\"Candy machine state: \", cndy);\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <>\n      <div className=\"title\">\n        <div className=\"titlewrapper\">\n          <a className=\"linkhome\" href=\"https://oceancats.club/\">\n            <div className=\"titleocean\">OCEAN</div>\n            <div className=\"titlecats\">CATS</div>\n            <img className=\"oceancatslogo\" src={oceancatslogo}></img>\n          </a>\n        </div>\n      </div>\n      <Container style={{ marginTop: 40, marginBottom: 20 }}>\n        <div className=\"box\">\n          <Paper\n            style={{\n              padding: 24,\n              borderRadius: 16,\n              backgroundColor: \"#00000000\",\n            }}\n          >\n            {!wallet.connected ? (\n              <div className=\"connectcontainer\">\n                <div className=\"connectcontent\">\n                  <div className=\"connecttitlecontainer\">\n                    <div className=\"connecttitle\">MINT AN OTTER</div>\n                    <div className=\"socials\">\n                      <div className=\"telegram\">{telegram}</div>\n                      <div className=\"twitter\">{twitter}</div>\n                      <a href=\"https://oceancats.club/\">\n                        <img className=\"OtterHome\" src={OtterHome}></img>\n                      </a>\n                    </div>\n                  </div>\n                  <div className=\"connectinfo\">\n                    Mint here an OceanCats NFT. Join a community building an\n                    animated cartoon show through the Solana Chain. You are able\n                    to mint 1 otter.\n                  </div>\n                  <>\n                    <ConnectButton>Connect Wallet</ConnectButton>\n                  </>\n                  <div className=\"solprice\">COST: 0 SOL</div>\n                </div>\n                <div className=\"pageartcontainer\">\n                  <img className=\"pageart\" src={connectpageart}></img>\n                </div>\n              </div>\n            ) : (\n              <>\n                <div className=\"mintpagecontainer\">\n                  <div className=\"connectcontent\">\n                    {candyMachine && (\n                      <Grid\n                        container\n                        direction=\"row\"\n                        justifyContent=\"center\"\n                        wrap=\"nowrap\"\n                      >\n                        <Grid item xs={3}>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            Remaining\n                          </Typography>\n                          <Typography\n                            variant=\"h6\"\n                            color=\"textPrimary\"\n                            style={{\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            {`${itemsRemaining}`}\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={4}>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            {isWhitelistUser && discountPrice\n                              ? \"Discount Price\"\n                              : \"Price\"}\n                          </Typography>\n                          <Typography\n                            variant=\"h6\"\n                            color=\"textPrimary\"\n                            style={{ fontWeight: \"bold\" }}\n                          >\n                            {isWhitelistUser && discountPrice\n                              ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                              : `◎ ${formatNumber.asNumber(\n                                  candyMachine.state.price\n                                )}`}\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={5}>\n                          {isActive &&\n                          endDate &&\n                          Date.now() < endDate.getTime() ? (\n                            <>\n                              <MintCountdown\n                                key=\"endSettings\"\n                                date={getCountdownDate(candyMachine)}\n                                style={{ justifyContent: \"flex-end\" }}\n                                status=\"COMPLETED\"\n                                onComplete={toggleMintButton}\n                              />\n                              <Typography\n                                variant=\"caption\"\n                                align=\"center\"\n                                display=\"block\"\n                                style={{ fontWeight: \"bold\" }}\n                              >\n                                TO END OF MINT\n                              </Typography>\n                            </>\n                          ) : (\n                            <>\n                              <MintCountdown\n                                key=\"goLive\"\n                                date={getCountdownDate(candyMachine)}\n                                style={{ justifyContent: \"flex-end\" }}\n                                status={\n                                  candyMachine?.state?.isSoldOut ||\n                                  (endDate && Date.now() > endDate.getTime())\n                                    ? \"COMPLETED\"\n                                    : isPresale\n                                    ? \"PRESALE\"\n                                    : \"LIVE\"\n                                }\n                                onComplete={toggleMintButton}\n                              />\n                              {isPresale &&\n                                candyMachine.state.goLiveDate &&\n                                candyMachine.state.goLiveDate.toNumber() >\n                                  new Date().getTime() / 1000 && (\n                                  <Typography\n                                    variant=\"caption\"\n                                    align=\"center\"\n                                    display=\"block\"\n                                    style={{ fontWeight: \"bold\" }}\n                                  >\n                                    UNTIL PUBLIC MINT\n                                  </Typography>\n                                )}\n                            </>\n                          )}\n                        </Grid>\n                      </Grid>\n                    )}\n\n                    <div className=\"minttitlecontainer\">\n                      <div className=\"connecttitle\">MINT AN OTTER</div>\n                      <div className=\"socials\">\n                        <div className=\"telegram\">{telegram}</div>\n                        <div className=\"twitter\">{twitter}</div>\n                        <a href=\"https://oceancats.club/\">\n                          <img className=\"OtterHome\" src={OtterHome}></img>\n                        </a>\n                      </div>\n                    </div>\n                    <div className=\"connectinfo\">\n                      Mint here an OceanCats NFT. Join a community building an\n                      animated cartoon show through the Solana Chain. You are\n                      able to mint 1 otter.\n                    </div>\n\n                    <MintContainer>\n                      {candyMachine?.state.isActive &&\n                      candyMachine?.state.gatekeeper &&\n                      wallet.publicKey &&\n                      wallet.signTransaction ? (\n                        <GatewayProvider\n                          wallet={{\n                            publicKey:\n                              wallet.publicKey ||\n                              new PublicKey(CANDY_MACHINE_PROGRAM),\n                            //@ts-ignore\n                            signTransaction: wallet.signTransaction,\n                          }}\n                          gatekeeperNetwork={\n                            candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                          }\n                          clusterUrl={rpcUrl}\n                          cluster={cluster}\n                          options={{ autoShowModal: false }}\n                        >\n                          <MintButton\n                            candyMachine={candyMachine}\n                            isMinting={isUserMinting}\n                            setIsMinting={(val) => setIsUserMinting(val)}\n                            onMint={onMint}\n                            isActive={\n                              isActive ||\n                              (isPresale && isWhitelistUser && isValidBalance)\n                            }\n                          />\n                        </GatewayProvider>\n                      ) : (\n                        <MintButton\n                          candyMachine={candyMachine}\n                          isMinting={isUserMinting}\n                          setIsMinting={(val) => setIsUserMinting(val)}\n                          onMint={onMint}\n                          isActive={\n                            isActive ||\n                            (isPresale && isWhitelistUser && isValidBalance)\n                          }\n                        />\n                      )}\n                    </MintContainer>\n                  </div>\n                  <div className=\"pageartcontainer\">\n                    <img className=\"pageart\" src={connectpageart}></img>\n                  </div>\n                </div>\n              </>\n            )}\n          </Paper>\n        </div>\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={\n            alertState.hideDuration === undefined\n              ? 6000\n              : alertState.hideDuration\n          }\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Container>\n    </>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport { DEFAULT_TIMEOUT } from \"./connection\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nlet error: string | undefined = undefined;\n\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\n}\n\nconst candyMachineId = getCandyMachineId();\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\n  \"devnet\") as WalletAdapterNetwork;\nconst rpcHost =\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n              error={error}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return \"--\";\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const CIVIC_GATEKEEPER_NETWORK =\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n    CIVIC\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from(\"gateway\"),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map((s) => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map((s) => s.publicKey)\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}